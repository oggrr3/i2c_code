var g_data = {"name":"../sim/top.sv","src":"//`include \"stimulus.sv\"\n`include \"interface.sv\"\n//`include \"scoreboard.sv\"\n//`include \"driver.sv\"\n//`include \"monitor.sv\"\n//`include \"env.sv\"\n`include \"assertion.sv\"\n\n//`include \"test_2.sv\"\n\n`ifdef TEST1\n  `include \"test_1.sv\"\n`elsif TEST2\n  `include \"test_2.sv\"\n`elsif TEST3\n  `include \"test_3.sv\"\n`elsif TEST4\n  `include \"test_4.sv\"\n`elsif TEST5\n  `include \"test_5.sv\"\n`elsif TEST6\n  `include \"test_6.sv\"\n`elsif TEST7\n  `include \"test_7.sv\"\n`elsif TEST8\n  `include \"test_8.sv\"\n`elsif TEST9\n  `include \"test_9.sv\"\n`elsif TEST10\n  `include \"test_10.sv\"\n`elsif TEST11\n  `include \"test_11.sv\"\n`elsif TEST12\n  `include \"test_12.sv\"\n`endif\n\nmodule top();\n\n    //  Clock generator\n    reg     i2c_clk     =   0   ;\n    reg     apb_clk     =   0   ;\n\n    always  #20    i2c_clk     =   ~i2c_clk    ;\n    always  #10     apb_clk     =   ~apb_clk    ;\n\n    //  DUT, assertion monitor, testcase instances\n    intf_i2c    intf(i2c_clk, apb_clk)          ;\n\n    // i2c_dut_slave_model     TOP (\n    //     .i2c_core_clk_i (i2c_clk           )     ,   \n    //     .pclk_i         (apb_clk           )     ,   \n    //     .preset_ni      (intf.preset_n     )     ,   \n    //     .paddr_i        (intf.paddr        )     ,     \n    //     .pwrite_i       (intf.pwrite       )     ,   \n    //     .psel_i         (intf.psel         )     ,   \n    //     .penable_i      (intf.penable      )     ,   \n    //     .pwdata_i       (intf.pwdata       )     ,   \n\n    //     .prdata_o       (intf.prdata       )     ,   \n    //     .pready_o       (intf.pready       )     ,   \n    //     .sda_io         (intf.sda          )     ,\n    //     .scl_io         (intf.scl          )     \n    // );\n\n    top_level     dut (\n        .PCLK       (apb_clk),\n        .PRESETn    (intf.preset_n),\n        .PSELx      (intf.psel),\n        .PWRITE     (intf.pwrite),\n        .PENABLE    (intf.penable),\n        .PADDR      (intf.paddr),\n        .PWDATA     (intf.pwdata),\n        .core_clk   (i2c_clk),\n\n        .PREADY     (intf.pready),\n        .PRDATA     (intf.prdata),\n        .sda        (intf.sda),\n        .scl        (intf.scl)\n    );\n\n    i2c_slave_model  i2c_slave_model (\n        .sda  (intf.sda)  ,\n        .scl  (intf.scl)\n    );\n\n    testcase test(intf)                         ;\n    assertion_cov acov(intf)                    ;\nendmodule","lang":"verilog"};
processSrcData(g_data);