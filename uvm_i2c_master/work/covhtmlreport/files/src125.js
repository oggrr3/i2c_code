var g_data = {"name":"../sim/apb_subscriber.sv","src":"`ifndef APB_SUBSCRIBER\r\n`define APB_SUBSCRIBER\r\n\r\n\r\nclass   apb_subscriber extends uvm_subscriber #(apb_transaction);\r\n\r\n    `uvm_component_utils(apb_subscriber)\r\n    uvm_analysis_imp #(apb_transaction, apb_subscriber) apb_subscriber_port ;\r\n\r\n    apb_transaction item    ;\r\n\r\n    reg [7:0]    ADDR_SLAVE;\r\n    reg [7:0]    PADDR;\r\n\r\n    covergroup cg;\r\n        addr_slave:   coverpoint  ADDR_SLAVE  {\r\n            bins address_of_slave_to_read   =   {8'b0010_000_1}     ;\r\n            bins address_of_slave_to_write  =   {8'b0010_000_0}     ;\r\n        }\r\n\r\n        reg_addr: coverpoint PADDR   {\r\n            bins    apb_read_status_reg         =   {3}     ;\r\n            bins    apb_read_receive_reg        =   {5}     ;\r\n\r\n            bins    apb_write_prescale_reg      =   {1}     ;\r\n            bins    apb_write_slave_addr_reg    =   {2}     ;\r\n            bins    apb_write_transmit_reg      =   {4}     ;\r\n            bins    apb_write_cmd_reg           =   {6}     ;\r\n        }\r\n\r\n        //cov_apb: cross addr_slave, reg_addr ;\r\n\r\n    endgroup\r\n\r\n    function  new(string name = \"apb_subscriber\", uvm_component parent);\r\n        super.new(name, parent);\r\n        apb_subscriber_port = new(\"apb_subscriber_port\", this);\r\n        item = apb_transaction::type_id::create(\"item\");\r\n        cg = new();\r\n    endfunction\r\n\r\n    //  Sample\r\n    virtual function void write(apb_transaction t);\r\n        `uvm_info(get_name(), \"Sample\", UVM_LOW)\r\n        PADDR = t.paddr;\r\n        ADDR_SLAVE = t.pwdata;\r\n        cg.sample();\r\n        //`uvm_info(get_type_name(), $sformatf(\" ---- cvg is %0f\", cg.get_coverage()), UVM_NONE)  // %f -> real number in decimal format\r\n    endfunction\r\n\r\nendclass\r\n\r\n`endif ","lang":"verilog"};
processSrcData(g_data);