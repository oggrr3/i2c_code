var g_data = {"name":"../rtl/top_level.v","src":"`include \"fifo.v\"\n`include \"apb_slave.v\"\n`include \"8bit_to_1byte.v\"\n`include \"clock_generator.v\"\n\nmodule top_level\n    #(parameter data_size = 8,parameter address_size = 3)  \n    (\n        // Inputs\n        input                           PCLK,\n        input                           PRESETn,\n        input                           PENABLE,\n        input                           PSELx,\n        input                           PWRITE,\n        input [7:0]                     PADDR,\n        input [data_size - 1:0]         PWDATA,\n        \n        // input                           scl_in,\n        // input                           sda_in,\n        input                           core_clk,\n\n        output [data_size - 1:0]        PRDATA,\n        output                          PREADY,\n        // output                          scl_out,\n        // output                          sda_out\n        inout                           sda,\n        inout                           scl\n    );\n    // Internal register\n    wire [data_size - 1:0]              prescale_reg;\n    wire [data_size - 1:0]              command_reg;\n    wire [data_size - 1:0]              status_reg;\n    wire [data_size - 1:0]              transmit_reg;\n    wire [data_size - 1:0]              receive_reg;\n    wire [data_size - 1:0]              address_reg;    \n\n    // FIFO inputs and outputs\n    wire [data_size - 1:0]              TX;\n    wire [data_size - 1:0]              RX;\n    wire [data_size - 1:0]              APB_RX;\n    wire                                i2c_clk_gen;\n\n    // FIFO read/write enable\n    wire                                fifo_tx_enable;\n    wire                                fifo_rx_enable;\n    wire                                i2c_enable;\n\n    assign i2c_enable = (!address_reg[0]) ? (command_reg[7] & !status_reg[6]) : (command_reg[7] & !status_reg[5]);\n\n    // Converter enable\n    wire                                converter_enable;\n    \n    assign command_reg [2:0]            =   0;\n    assign status_reg [3:0]             =   0;\n    \n\n    // FIFO TX\n    FIFO_top #(data_size, address_size) fifo_tx\n    (\n        .write_data                     (transmit_reg),\n        .write_enable                   (command_reg[6]),\n        .write_clk                      (PCLK),\n        .write_reset_n                  (command_reg[4]),\n        \n        .read_enable                    (fifo_tx_enable),           \n        .read_clk                       (core_clk),\n        .read_reset_n                   (command_reg[4]),\n\n        .read_data                      (TX),\n        .write_full                     (status_reg[7]),\n        .read_empty                     (status_reg[6])\n    );\n\n    // FIFO RX\n    FIFO_top #(data_size, address_size) fifo_rx\n    (\n        .write_data                     (RX),\n        .write_enable                   (fifo_rx_enable),\n        .write_clk                      (core_clk),\n        .write_reset_n                  (command_reg[4]),\n        \n        .read_enable                    (command_reg[5]),           \n        .read_clk                       (PCLK),\n        .read_reset_n                   (command_reg[4]),\n\n        .read_data                      (APB_RX),\n        .write_full                     (status_reg[5]),\n        .read_empty                     (status_reg[4])\n    );\n    \n    // APB INTERFACE\n    apb apb\n    (\n        .PCLK                           (PCLK),\n        .PRESETn                        (PRESETn),\n        .PENABLE                        (PENABLE),\n        .PSELx                          (PSELx),\n        .PWRITE                         (PWRITE),\n        .PADDR                          (PADDR),\n        .PWDATA                         (PWDATA),\n        .PREADY                         (PREADY),\n        .PRDATA                         (PRDATA),\n        \n        .prescale_reg                   (prescale_reg),\n        .command_reg                    (command_reg),\n        .status_reg                     (status_reg),\n        .transmit_reg                   (transmit_reg),\n        .receive_reg                    (APB_RX),\n        .address_reg                    (address_reg)\n    );\n\n    // I2C MASTER\n    i2c_controller i2c\n    (\n        .core_clk                       (core_clk),\n        .i2c_clk                        (i2c_clk_gen),\n        .rst_n                          (command_reg[4]),\n        .enable                         (i2c_enable),\n        .slave_address                  (address_reg),\n        .data_in                        (TX),\n        .repeated_start_cond            (command_reg[3]),\n        .sda                            (sda),\n        .scl                            (scl),\n        .fifo_tx_enable                 (fifo_tx_enable),\n        .fifo_rx_enable                 (fifo_rx_enable),\n        .converter_enable               (converter_enable)\n    );\n\n    // 8 BIT TO 1 BYTE CONVERTER\n    BitToByteConverter converter\n    (\n        .i2c_clk                        (i2c_clk_gen),\n        .rst_n                          (command_reg[4]),\n        .in                             (sda),\n        .enable                         (converter_enable),\n        .out                            (RX)\n    );\n\n    // CLOCK GENERATOR\n    ClockGenerator clock_gen\n    (\n        .core_clk                       (core_clk),\n        .prescale                       (prescale_reg),\n        .rst_n                          (command_reg[4]),\n        .i2c_clk                        (i2c_clk_gen)\n    );\n\n    i2c_slave_model slave\n    (\n        .scl(scl),\n        .sda(sda)\n    );\nendmodule","lang":"verilog"};
processSrcData(g_data);